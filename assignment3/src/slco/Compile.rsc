module slco::Compile

import slco::Parser;
import slco::AST;
import slco::Syntax;
import IO;
import util::Math;
import slco::Load;


/*
Module compiles the SLCO code to executable python code.
*/

void parseCompile(loc l) = compile(load(l)); 

void compile(Program program) {
	writeFile(|project://assignment3/src/joejoe.py|, program2Python(program));
	println("Done...");
	return;
}

str program2Python(Program program) {
	println("---------\nGenerating program...");
	str python = "# This file is automatically generated from a slco file\n";
	python += "# Necessary inputs:\n";
	python += "import time\n\n";
	
	//create method for creating the classes
	// Might want to loop over all models, if more models in one file
	python += createModel(program.model);	
	return python;
}

str createModel(Model model) {
	str pythonCode = "";
	println("Create classes");
	pythonCode = "# Defining classes\n";

	for (Class class <- model.classes) {
		pythonCode += createClass(class);
		pythonCode += "\n";
	}
	
	for (Channel channel <- model.channels)
	{
		pythonCode += createChannel(channel);
		pythonCode += "\n";
	}
	pythonCode += "\n";
	

	pythonCode += initializeObjects(model);
	pythonCode += "\n";
	
	return pythonCode;
}

str createClass(Class class) {
	str pythonCode = "# Class\n";
	pythonCode += "class <class.classId.name>:\n";
	int cnt = 0;
	for (SLCOId id <- class.portIds) {
		str count = toString(cnt);
		pythonCode += "\tport<count> = <id.name>\n";
		cnt += 1;
	}
	pythonCode += "\n";
	
	for (StateMachine sm <- class.stateMachines) {
		pythonCode += "\tdef <sm.stateMachineId.name>():\n";
		cnt = 0;
		for (Variable var <- sm.variables) {
		// Switch van maken met de types
			pythonCode += "\t\tvar<cnt> = <var.variableId.name>\n";
			cnt += 1;
		}
		pythonCode += "\n";
	
		for (Variable var <- sm.variables) {
		// Switch van maken met de types
			pythonCode += "\t\tvar<cnt> = <var.variableId.name>\n";
			cnt += 1;
		}
		
	}
	
	return pythonCode;
}

str createChannel(Channel channel) {
	str pythonCode = "";
	pythonCode += "class <channel.channelId.name>:\n";
	pythonCode += "\tdef __init__(self):\n";
	pythonCode += "\t\treturn\n\n";
	
	pythonCode += "\t# sync function between ports...\n";
	pythonCode += "\tdef sync(self, <channel.objectIdSource.name>, <channel.objectIdTarget.name>):\n";
	pythonCode += "\t\t <channel.objectIdTarget.name>.states[\"<channel.portIdTarget.name>\"]= <channel.objectIdSource.name>.states[\"<channel.portIdSource.name>\"]";
	return pythonCode;
}

// Initializes the classes
str initializeObjects(Model model) {
	str pythonCode = "";
	// Define the main method
	pythonCode += "# Initialize the classes\n";
	pythonCode += "def makeModel():\n";
	// call all methods from main:
	
	for (Class class <- model.classes) {
		str class_init = "";
		int count = 0;
		str ports = "";
		for (SLCOId portId <- class.portIds) {
			if (count == 0) {
				ports += "\"<portId.name>\"";
			} else {
				ports += ", \"<portId.name>\"";
			}
		}
		class_init += "\tports<class.classId.name> = [<ports>]\n";
		
		count = 0;
		str sms = "";
		str is = "";
		for (StateMachine sm <- class.stateMachines) {
			if (count == 0) {
				sms += "\"<sm.stateMachineId.name>\"";
				is += "\"<sm.initialState.name>\"";
			} else {
				sms += ", \"<sm.stateMachineId.name>\"";
				is += ", \"<sm.initialState.name>\"";
			}
		}
		class_init += "\tstate_machines<class.classId.name> = [<sms>]\n";
		class_init += "\tinitial_states<class.classId.name> = [<is>]\n";
		class_init += "\n";
		pythonCode += class_init;
	}
	
	for (Object obj <- model.objects) {
		pythonCode += "\t<obj.objectId.name> = <obj.classId.name>(ports<obj.classId.name>, state_machines<obj.classId.name>, initial_states<obj.classId.name>)\n";
	}
	
	return pythonCode;
}