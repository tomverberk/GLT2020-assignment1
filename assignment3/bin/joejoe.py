# This file is automatically generated from a slco file
# Necessary inputs:
import time

# Defining classes
# Class
class Calculator:
	ports = {}
	states = {}

	def __init__(self, ports, initial_states, state_machines):
)	for port in ports:
		ports[port] = port
	cnt = 0
	while cnt < len(initial_states):
		self.states[state_machines[cnt]] = initial_states[cnt]
		cnt += 1

	def Main(self):


# Class
class User:
	ports = {}
	states = {}

	def __init__(self, ports, initial_states, state_machines):
)	for port in ports:
		ports[port] = port
	cnt = 0
	while cnt < len(initial_states):
		self.states[state_machines[cnt]] = initial_states[cnt]
		cnt += 1

	def Loop(self, r):
		var0 = r


class c0:
	def __init__(self):
		return

	# sync function between ports...
	def sync(self, u, c):
		 c.states["in"]= u.states["out"]

class c1:
	def __init__(self):
		return

	# sync function between ports...
	def sync(self, c, u):
		 u.states["in"]= c.states["out"]


# Initialize the classes
def makeModel():
	portsCalculator = ["in""out"]
	state_machinesCalculator = ["Main"]
	initial_statesCalculator = ["S"]

	portsUser = ["in""out"]
	state_machinesUser = ["Loop"]
	initial_statesUser = ["Start"]

	c = Calculator(portsCalculator, state_machinesCalculator, initial_statesCalculator)
	u = User(portsUser, state_machinesUser, initial_statesUser)
	# Below you can add the commands you would like to execute on the channels

