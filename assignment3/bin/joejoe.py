# This file is automatically generated from a slco file
# Necessary inputs:
import time
import queue


# Defining classes
# Class
class Calculator:
	ports = {}
	states = {}

	def __init__(self, portsInput, initial_states, state_machines):
		for port in portsInput:
			self.ports[port] = port
		cnt = 0
		while cnt < len(initial_states):
			self.states[state_machines[cnt]] = None
			cnt += 1

	def Main(self):
		if self.states["Main"] == "S":
			in_var = self.ports["in"]
			a = in_var[0]
			b = in_var[1]
			out_var = [a + b]
			self.ports["out"] = out_var
			self.states["Main"] = "S"


# Class
class User:
	ports = {}
	states = {}

	def __init__(self, portsInput, initial_states, state_machines):
		for port in portsInput:
			self.ports[port] = port
		cnt = 0
		while cnt < len(initial_states):
			self.states[state_machines[cnt]] = None
			cnt += 1

	def Loop(self):
		if self.states["Loop"] == "Start":
			out_var = ["a", "b"]
			self.ports["out"] = out_var
			in_var = self.ports["in"]
			if in_var is None:
				print("No input yet received, still in same state")
				return
			print(in_var)
			self.states["Loop"] = "Wait"
		elif self.states["Loop"] == "Wait":
			time.sleep(1.5)
			print("Waited 1.5 seconds")
			self.states["Loop"] = "Start"


class c0:
	def __init__(self):
		self.q = queue.Queue(maxsize=0)

	def addQueue(self, u):
		self.q.put(u.ports["out"])

	# getQueue function between ports...
	def getQueue(self, c):
		 c.states["in"]= self.q.get()

	def queueEmpty(self):
		return self.q.empty()

class c1:
	def __init__(self):
		self.q = queue.Queue(maxsize=0)

	def addQueue(self, c):
		self.q.put(c.ports["out"])

	# getQueue function between ports...
	def getQueue(self, u):
		 u.states["in"]= self.q.get()

	def queueEmpty(self):
		return self.q.empty()


# Initialize the classes
def makeModel():
	portsCalculator = ["in", "out"]
	state_machinesCalculator = ["Main"]
	initial_statesCalculator = ["S"]

	portsUser = ["in", "out"]
	state_machinesUser = ["Loop"]
	initial_statesUser = ["Start"]

	c = Calculator(portsCalculator, state_machinesCalculator, initial_statesCalculator)
	u = User(portsUser, state_machinesUser, initial_statesUser)
	# Below you can add the commands you would like to execute on the channels
