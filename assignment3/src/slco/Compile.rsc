module slco::Compile

import slco::AST;
import slco::Syntax;
import IO;
import util::Math;


/*
Module compiles the SLCO code to executable python code.
*/

void compile(Program program) {
	writeFile(program.src[extension="py"].top, program2Python(program));
	return;
}

str program2Python(Program program) {
	println("---------\nGenerating program...");
	str python = "# This file is automatically generated from a slco file\n";
	python += "# Necessary inputs:\n";
	python += "import time\n\n";
	
	//create method for creating the classes
	// Might want to loop over all models, if more models in one file
	python += createModel(program.model);
	
	// Define the main method
	python += "# Initialize the classes\n";
	python += "def makeModel():\n";
	// call all methods from main:
	

	return python;
}

str createModel(Model model) {
	println("Create classes");
	str pythonCode = "# Defining classes\n";

	for (Class class <- model.classes) {
		pythonCode += createClass(class);
		pythoncode += "\n";
	}
	
	for (Channel channel <- model.channels)
	{
		pythoncode += createChannel(channel);
		pythoncode += "\n";
	}
	pythoncode += "\n";
	

	pythoncode += initializeObjects(model);
	pythoncode += "\n";
	
	return pythonCode;
}

str createClass(Class class) {
	pythonCode = "# Class\n";
	pythonCode += "class <class.classId>\n";
	int cnt = 0;
	for (SLCOId id <- class.portIds) {
		str count = toString(cnt);
		pythonCode += "\tport<count> = <id>\n";
		cnt += 1;
	}
	pythonCode += "\n";
	
	for (StateMachine sm <- class.stateMachines) {
		pythonCode += "\tdef <sm.stateMachineId>():\n";
		cnt = 0;
		for (Variable var <- sm.variables) {
		// Switch van maken met de types
			pythonCode += "\t\tvar<cnt> = <var.variableId>\n";
			cnt += 1;
		}
		pythonCode += "\n";
	
		for (Variable var <- sm.variables) {
		// Switch van maken met de types
			pythonCode += "\t\tvar<cnt> = <var.variableId>\n";
			cnt += 1;
		}
		
	}
	
	return pythonCode;
}

str createChannel(Channel channel) {
	
}

str initializeObjects(Model model) {
	
}