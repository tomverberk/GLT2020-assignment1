# This file is automatically generated from a slco file
# Necessary inputs:
import time

import queue

# Defining classes
# Class
class Calculator:
	ports = {}
	states = {}

	def __init__(self, ports, initial_states, state_machines):
)	for port in ports:
		ports[port] = port
	cnt = 0
	while cnt < len(initial_states):
		self.states[state_machines[cnt]] = initial_states[cnt]
		cnt += 1

	def Main(self):
		if self.states["Main"] == S:
			in_var = self.ports["in]
			print(in_var)
			self.states["Main"] = "S"



# Class
class User:
	ports = {}
	states = {}

	def __init__(self, ports, initial_states, state_machines):
)	for port in ports:
		ports[port] = port
	cnt = 0
	while cnt < len(initial_states):
		self.states[state_machines[cnt]] = initial_states[cnt]
		cnt += 1

	def Loop(self, r = 1):
		if self.states["Loop"] == Start:
			in_var = self.ports["in]
			print(in_var)
			self.states["Loop"] = "Wait"

		elif self.states["Loop"] == "Wait":
			time.sleep(1.5)			self.states["Loop"] = "Start"



class c0:
	def __init__(self):
		self.q = queue.Queue(maxsize=0)

	def addQueue(self, u):
		self.q1.put(u.ports["out"])

	# getQueue function between ports...
	def getQueue(self, c):
		 c.states["in"]= self.q.get()

	def queueEmpty(self):
		return self.q.empty()

class c1:
	def __init__(self):
		self.q = queue.Queue(maxsize=0)

	def addQueue(self, c):
		self.q1.put(c.ports["out"])

	# getQueue function between ports...
	def getQueue(self, u):
		 u.states["in"]= self.q.get()

	def queueEmpty(self):
		return self.q.empty()


# Initialize the classes
def makeModel():
	portsCalculator = ["in""out"]
	state_machinesCalculator = ["Main"]
	initial_statesCalculator = ["S"]

	portsUser = ["in""out"]
	state_machinesUser = ["Loop"]
	initial_statesUser = ["Start"]

	c = Calculator(portsCalculator, state_machinesCalculator, initial_statesCalculator)
	u = User(portsUser, state_machinesUser, initial_statesUser)
	# Below you can add the commands you would like to execute on the channels

